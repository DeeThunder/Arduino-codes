

/* 
  Sketch generated by the Arduino IoT Cloud Thing "Untitled"
  https://create.arduino.cc/cloud/things/19b51981-9b13-434f-869d-4d24ecd8687c 

  Arduino IoT Cloud Variables description

  The following variables are automatically generated and updated when changes are made to the Thing

  CloudSwitch socket;

  Variables which are marked as READ/WRITE in the Cloud Thing will also have functions
  which are called when their values are changed from the Dashboard.
  These functions are generated with the Thing and added at the end of this sketch.
*/

#include "functionDeclaration.h" 
#include "thingProperties.h"
#include "funtionTab.h"


void setup() {
  // Initialize serial and wait for port to open:
  Serial.begin(9600);
  // This delay gives the chance to wait for a Serial Monitor without blocking if none is found
  delay(1500); 

  // Defined in thingProperties.h
  initProperties();

  // Connect to Arduino IoT Cloud
  ArduinoCloud.begin(ArduinoIoTPreferredConnection);
  
  /*
     The following function allows you to obtain more information
     related to the state of network and IoT Cloud connection and errors
     the higher number the more granular information youâll get.
     The default is 0 (only errors).
     Maximum is 4
 */
  setDebugMessageLevel(2);
  ArduinoCloud.printDebugInfo();
  Serial.begin(9600);
  pinMode(2, OUTPUT);
  digitalWrite(2,HIGH);
  if (!EEPROM.begin (EEPROM_SIZE))
  {
  Serial.println(" EEPROM failed");
  }
delay(1000);
lcd.init();
lcd.backlight();
lcd.clear();
lcd.setCursor(0,0);
lcd.print("*=SWITCH  PASSKEY");
lcd.setCursor(0,1);
lcd.print("PRESS ANY KEY TO CONTINUE");
Serial.println("*= SWITCH PASSKEY");
keyss = Getkeyvalue();
//Reset the watchdog timer to prevent a reset
esp_task_wdt_reset();
Serial.print(keyss);
if (keyss == '*'){
    //Reset the watchdog timer to prevent a reset
    esp_task_wdt_reset();
    lcd.clear();
    useron();
    esp_task_wdt_reset();
    lcd.clear();
    useroff();
    esp_task_wdt_reset();
    delay(1000);
}
  else {
    lcd.setCursor(0,1);
    lcd.print("SWITCH SET");
  Serial.println("SWITCH SET");
}
}

void loop() {
  ArduinoCloud.update();
if(LCDRefreshTimer < millis()){
   LCD_DisplayFuntion();
 }
//  // Your code here 
  //  delay(1000);
  int keyyys =  customKeypad.getKey();
  if( keyyys != NO_KEY){
    lcd.clear();
    lcd.setCursor(0,0);
    lcd.print("SMART SOCKET");
    Serial.println("WELCOME HOME");
    delay(1000);
    lcd.clear();
    lcd.setCursor(0,0);
    lcd.print("ENTER PASSKEY");
    Serial.println("ENTER PASSKEY");
    passkeyy();
    esp_task_wdt_reset();
  }  
}


/*
  Since Socket is READ_WRITE variable, onSocketChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onSocketChange()  {
  // Add your code here to act upon Socket change
  if (socket){
   digitalWrite(2, LOW);
   lcd.clear();
   lcd.setCursor(0,0);
   lcd.print( "ONLINE CONTROL");
   
}
 else { 
    digitalWrite(2, HIGH);
   lcd.clear();
   lcd.setCursor(0,0);
   lcd.print( "ONLINE CONTROL");
}
}
